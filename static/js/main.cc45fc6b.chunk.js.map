{"version":3,"sources":["Components/Square/index.js","Components/Board/index.js","Components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","n","this","squares","renderSquare","Component","Game","checkBoard","minimax","doMove","level","possibilities","symbol","state","xIsNext","choice","Math","floor","random","checkWinner","console","log","i","length","x","y","z","setState","restart","stepNumber","history","slice","winner","concat","selectLevel","levels","document","querySelector","options","selectedIndex","Array","fill","status","current","draw","onChange","e","clicked","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cc45fc6b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n       <button className = \"square\" onClick = {props.onClick}>\r\n           {props.value}\r\n       </button>\r\n    )\r\n}\r\n\r\nexport default Square;\r\n","import React, { Component } from 'react';\r\nimport Square from '../Square';\r\nimport './style.css';\r\n\r\nexport class Board extends Component {\r\n  \r\n    renderSquare(n)\r\n    {\r\n        return <Square  value={this.props.squares[n]} onClick = {() => this.props.onClick(n)}></Square>\r\n    }\r\n    render() {\r\n        return (\r\n            <div className = \"board\">\r\n                <div className = \"board-row\">\r\n                   {this.renderSquare(0)}\r\n                   {this.renderSquare(1)} \r\n                   {this.renderSquare(2)} \r\n                 </div>\r\n                 <div className = \"board-row\">\r\n                   {this.renderSquare(3)}\r\n                   {this.renderSquare(4)} \r\n                   {this.renderSquare(5)} \r\n                 </div>\r\n                 <div className = \"board-row\">\r\n                   {this.renderSquare(6)}\r\n                   {this.renderSquare(7)} \r\n                   {this.renderSquare(8)} \r\n                 </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board\r\n","import React,{Component} from 'react';\r\nimport Board from '../Board';\r\nimport './style.css';\r\nclass Game extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = \r\n        {\r\n            \r\n            xIsNext : true,\r\n            stepNumber:0,\r\n            level:'vs player',\r\n            history:\r\n            [\r\n                { squares: Array(9).fill(null) }\r\n            ]\r\n        }\r\n    }\r\n\r\n    checkBoard = (squares ) =>\r\n    {\r\n        if(squares[0] && squares[1]  && squares[2] \r\n        && squares[3]  && squares[4] && squares[5]\r\n        && squares[6] && squares[7]  && squares[8])return true;\r\n        else return false;\r\n    }\r\n    \r\n    minimax = (squares) =>\r\n    {\r\n        return 1;\r\n    }\r\n    doMove = (squares,level) =>\r\n    {\r\n       \r\n       \r\n        \r\n        const possibilities =\r\n        [\r\n            [0,1,2],\r\n            [3,4,5],\r\n            [6,7,8],\r\n            [0,3,6],\r\n            [1,4,7],\r\n            [2,5,8],\r\n            [0,4,8],\r\n            [2,4,6]\r\n        ]\r\n        const symbol =this.state.xIsNext ? 'O' : 'X';\r\n        const choice = Math.floor(Math.random() * 9);\r\n        if(!this.checkWinner(squares))\r\n        {\r\n        switch (level)\r\n        {\r\n            case 'easy':\r\n                \r\n                console.log(choice);\r\n                if(!squares[choice])\r\n                {\r\n                \r\n                    squares[choice] = symbol;\r\n                    return choice;\r\n                } \r\n                else\r\n                {\r\n                    this.doMove(squares,'easy');\r\n                }\r\n            break;\r\n            case 'medium':\r\n                for(let i=0 ; i < possibilities.length ; i++)\r\n        {\r\n            const [x,y,z] = possibilities[i];\r\n            if((!squares[x] && squares[y]===symbol && squares[z] === symbol)) \r\n            {\r\n                squares[x] = symbol;\r\n                return;\r\n            }\r\n            else if(squares[x] === symbol && !squares[y] && squares[z] === symbol) \r\n            {\r\n                squares[y] = symbol;\r\n                return ;\r\n            }\r\n            else if(squares[x] === symbol && squares[y] === symbol && !squares[z]) \r\n            {\r\n                squares[z] = symbol;\r\n                return;\r\n            }\r\n            \r\n        }\r\n         if(!squares[choice])\r\n        {\r\n        \r\n            squares[choice] = symbol;\r\n            return choice;\r\n        } \r\n        else\r\n        {\r\n            this.doMove(squares,'medium');\r\n        }\r\n            break;\r\n            case 'hard':break;\r\n            case 'vs player':\r\n                this.setState({xIsNext:!this.state.xIsNext})\r\n                break;\r\n        }\r\n    }\r\n    }\r\n    checkWinner = (squares) =>\r\n    {\r\n        const possibilities =\r\n        [\r\n            [0,1,2],\r\n            [3,4,5],\r\n            [6,7,8],\r\n            [0,3,6],\r\n            [1,4,7],\r\n            [2,5,8],\r\n            [0,4,8],\r\n            [2,4,6]\r\n        ]\r\n\r\n        for(let i=0 ; i < possibilities.length ; i++)\r\n        {\r\n            const [x,y,z] = possibilities[i];\r\n            if(squares[x] && squares[x] === squares[y] && squares[y] === squares[z]) return squares[x];\r\n            \r\n        }\r\n        return null;\r\n\r\n    }\r\n    restart = () => {\r\n        console.log(\"hehe\");\r\n        this.setState({stepNumber : 0})\r\n    }\r\n    onClick = (n) => {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        const winner = this.checkWinner(squares);\r\n        const level = this.state.level;\r\n       \r\n       if(winner || squares[n]) return; \r\n       \r\n        squares[n] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat({\r\n                squares: squares\r\n            }),\r\n            stepNumber: history.length\r\n        });\r\n      \r\n        this.doMove(squares,level);\r\n        this.setState({\r\n            history: history.concat({\r\n                squares: squares\r\n            }),\r\n            stepNumber: history.length\r\n        });\r\n       \r\n        \r\n        \r\n        \r\n    }\r\n    selectLevel = () =>\r\n    {\r\n        this.restart();\r\n        const levels = document.querySelector('select');\r\n        const level =levels.options[levels.selectedIndex].value\r\n        this.setState({level : level})\r\n    }\r\n    render()\r\n    {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const squares = current.squares.slice();\r\n        const winner = this.checkWinner(squares);\r\n        const draw = this.checkBoard(squares);\r\n        let status;\r\n\r\n      \r\n        \r\n\r\n         if(winner) \r\n         {\r\n             status = `Winner is ${winner}` \r\n        }  \r\n\r\n        else\r\n        {\r\n            status = `Next player is ${this.state.xIsNext ? 'X' : 'O'}`;\r\n        } \r\n        if (draw)\r\n        {\r\n            status = `Nobody win` \r\n        }\r\n         return (\r\n    <div className=\"game\">\r\n    <div className =\"info\">\r\n    <div className = \"status\">{status}</div>\r\n    <div className=\"options\">\r\n    <select onChange = {(e) => this.selectLevel()}>\r\n\t\t<option>vs player</option>\r\n\t\t<option>easy</option>\r\n        <option>medium</option>\r\n\t</select>\r\n    </div>\r\n    </div>\r\n   \r\n    <Board \r\n    squares={current.squares}\r\n    clicked = {this.props.clicked}\r\n    onClick = {(n) => this.onClick(n)}\r\n    ></Board>\r\n    \r\n    <button className=\"restart\" onClick = {() => this.restart()}>Restart</button>\r\n   \r\n    \r\n    </div>\r\n  );         \r\n}\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport Game from './Components/Game';\nimport './App.css'\nfunction App() {\n  return (\n    <React.Fragment>\n      <Game/>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}